'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _presets = require('./validators/presets');

var _presets2 = _interopRequireDefault(_presets);

var _colors = require('./validators/colors');

var _colors2 = _interopRequireDefault(_colors);

var _versioning = require('./validators/versioning');

var _versioning2 = _interopRequireDefault(_versioning);

var _injector = require('./injector');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebpackPwaManifest = function () {
  function WebpackPwaManifest() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, WebpackPwaManifest);

    (0, _presets2.default)(options, 'dir', 'display', 'orientation');
    (0, _colors2.default)(options, 'background_color', 'theme_color');
    (0, _versioning2.default)(options, 'useWebpackPublicPath');
    this.assets = null;
    this.htmlPlugin = false;
    var shortName = options.short_name || options.name || 'App';
    this.options = Object.assign({
      filename: 'manifest.json',
      name: 'App',
      short_name: shortName,
      orientation: 'portrait',
      display: 'standalone',
      start_url: '.',
      inject: true,
      fingerprints: true,
      ios: false,
      publicPath: null,
      includeDirectory: true
    }, options);
  }

  _createClass(WebpackPwaManifest, [{
    key: 'apply',
    value: function apply(compiler) {
      var that = this;
      compiler.plugin('compilation', function (compilation) {
        compilation.plugin('html-webpack-plugin-before-html-processing', function (htmlPluginData, callback) {
          if (!that.htmlPlugin) that.htmlPlugin = true;
          (0, _injector.buildResources)(that, that.options.publicPath || compilation.options.output.publicPath, function () {
            if (that.options.inject) {
              var tags = (0, _injector.generateAppleTags)(that.options, that.assets);
              var themeColorTag = {
                name: 'theme-color',
                content: that.options['theme-color'] || that.options.theme_color
              };
              if (themeColorTag.content) (0, _injector.applyTag)(tags, 'meta', themeColorTag);
              (0, _injector.applyTag)(tags, 'link', {
                rel: 'manifest',
                href: that.options.filename
              });
              htmlPluginData.html = htmlPluginData.html.replace(/(<\/head>)/i, (0, _injector.generateHtmlTags)(tags) + '</head>');
            }
            callback(null, htmlPluginData);
          });
        });
      });
      compiler.plugin('emit', function (compilation, callback) {
        if (that.htmlPlugin) {
          (0, _injector.injectResources)(compilation, that.assets, callback);
        } else {
          (0, _injector.buildResources)(that, that.options.publicPath || compilation.options.output.publicPath, function () {
            (0, _injector.injectResources)(compilation, that.assets, callback);
          });
        }
      });
    }
  }]);

  return WebpackPwaManifest;
}();

module.exports = WebpackPwaManifest;