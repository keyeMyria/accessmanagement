var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { constructDefaultOptions, createApolloFetch, } from 'apollo-fetch';
import { ReactNativeFile, extractFiles } from 'extract-files';
export { ReactNativeFile };
export function constructUploadOptions(requestOrRequests, options) {
    var files = extractFiles(requestOrRequests);
    if (files.length) {
        if (typeof FormData === 'undefined') {
            throw new Error('Environment must support FormData to upload files.');
        }
        options.method = 'POST';
        options.body = new FormData();
        options.body.append('operations', JSON.stringify(requestOrRequests));
        files.forEach(function (_a) {
            var path = _a.path, file = _a.file;
            return options.body.append(path, file);
        });
        return options;
    }
    return constructDefaultOptions(requestOrRequests, options);
}
export function createApolloFetchUpload(params) {
    if (params === void 0) { params = {}; }
    return createApolloFetch(__assign({}, params, { constructOptions: constructUploadOptions }));
}
//# sourceMappingURL=index.js.map